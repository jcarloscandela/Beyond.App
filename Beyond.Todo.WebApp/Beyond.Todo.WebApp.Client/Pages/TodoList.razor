@page "/todo"
@using Beyond.Todo.Application.Commands
@using Beyond.Todo.Application.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using Beyond.Todo.WebApp.Client.Components
@using Beyond.Todo.WebApp.Client.Models
@inject HttpClient Http
@rendermode InteractiveServer
@inject IToastService ToastService

<PageTitle>Todo List</PageTitle>

<div class="container">
    <div class="header">
        <h1>Todo List</h1>
        <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="@(() => OpenCreateDialog())">
            Create Todo
        </FluentButton>
    </div>

    @if (showDialog)
    {
        <TodoDialog @bind-IsVisible="showDialog" IsEdit="isEdit" TodoItem="selectedTodo" Categories="categories"
        OnSave="HandleSaveAsync" OnDelete="HandleDeleteAsync" />
    }

    @if (todos == null)
    {
        <FluentProgressRing />
    }
    else
    {
        <div class="todo-grid">
            @foreach (var item in todos.Items)
            {
                <TodoCard Item="@item" OnEdit="HandleEdit" />
            }
        </div>

        <div class="pagination">
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Lightweight" Disabled="@(CurrentPage <= 1)"
            OnClick="@(() => NavigateToPage(CurrentPage - 1))">
                Previous
            </FluentButton>

            <FluentLabel>Page @CurrentPage</FluentLabel>

            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Lightweight" Disabled="@(!HasNextPage)"
            OnClick="@(() => NavigateToPage(CurrentPage + 1))">
                Next
            </FluentButton>
        </div>
    }
</div>

<style>
    .todo-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    padding: 20px 0;
    }

    .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 16px;
    padding: 20px 0;
    }
</style>

@code {
    private PaginatedTodoItemsDto? todos;
    private int CurrentPage = 1;
    private const int PageSize = 10;
    private bool showDialog;
    private bool isEdit = false;
    private TodoItemDto? selectedTodo;
    private List<CategoryDto> categories = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
        await LoadCategories();
    }

    private async Task LoadTodos()
    {
        int skip = (CurrentPage - 1) * PageSize;
        todos = await Http.GetFromJsonAsync<PaginatedTodoItemsDto>($"api/todo?skip={skip}&take={PageSize}");
    }

    private async Task LoadCategories()
    {
        categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/todo/categories") ?? new();
    }

    public async Task NavigateToPage(int page)
    {
        if (page < 1) return;
        CurrentPage = page;
        await LoadTodos();
    }

    private bool HasNextPage => todos != null && (CurrentPage * PageSize) < todos.TotalCount;

    private async Task OpenCreateDialog()
    {
        selectedTodo = null;
        isEdit = false;
        StateHasChanged();
        showDialog = true;
    }

    private async Task HandleEdit(TodoItemDto todo)
    {
        selectedTodo = todo;
        isEdit = true;
        StateHasChanged();
        showDialog = true;
    }

    private async Task HandleSaveAsync(CreateTodoDto todoDto)
    {
        if (string.IsNullOrWhiteSpace(todoDto.Title))
            return;

        HttpResponseMessage response;

        if (isEdit && selectedTodo != null)
        {
            var updateCommand = new UpdateItemCommand(selectedTodo.Id, todoDto.Description);
            response = await Http.PutAsJsonAsync($"api/todo/{selectedTodo.Id}", updateCommand);
        }
        else
        {
            var createCommand = new AddTodoItemCommand(todoDto.Title, todoDto.Description, todoDto.Category);

            response = await Http.PostAsJsonAsync("api/todo", createCommand);

        }

        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess(isEdit ? "Todo updated successfully!" : "Todo created successfully!");
            await LoadTodos();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ToastService.ShowError($"Error: {errorMessage}");
        }
    }

    private async Task HandleDeleteAsync(int id)
    {
        var response = await Http.DeleteAsync($"api/todo/{id}");
        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Todo deleted successfully!");
            await LoadTodos();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ToastService.ShowError($"Error: {errorMessage}");
            //TODO: Show the customer error.
        }
    }
}
