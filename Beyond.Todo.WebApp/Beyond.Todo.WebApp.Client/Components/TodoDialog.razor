@using Beyond.Todo.Application.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using Beyond.Todo.WebApp.Client.Models
@using System.ComponentModel.DataAnnotations
@inject IToastService ToastService

<EditForm Model="@todoDto" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <FluentDialog Modal="true" @bind-Visible="IsVisible">
        <FluentDialogHeader>
            <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                <FluentLabel Typo="Typography.H4">@(IsEdit ? "Edit Todo" : "Create Todo")</FluentLabel>
            </div>
        </FluentDialogHeader>
        <FluentDialogBody>
            <div class="form-group">
                <FluentTextField Label="Title" @bind-Value="todoDto.Title" Disabled="@IsEdit" />
                <ValidationMessage For="@(() => todoDto.Title)" />
            </div>
            <div class="form-group">
                <FluentTextArea Label="Description" @bind-Value="todoDto.Description" />
                <ValidationMessage For="@(() => todoDto.Description)" />
            </div>
            <div class="form-group">
                <FluentSelect TOption="string" Label="Category" @bind-Value="todoDto.Category" Disabled="@IsEdit">
                    <option value="">Select a category</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Name">@category.Name</option>
                    }
                </FluentSelect>
            </div>
        </FluentDialogBody>
        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Lightweight" OnClick="@Cancel">Cancel</FluentButton>
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" OnClick="@Submit">Save</FluentButton>
            @if (IsEdit)
            {
                <FluentButton Appearance="Appearance.Accent" BackgroundColor="red" OnClick="@Delete">Delete</FluentButton>
            }
        </FluentDialogFooter>
    </FluentDialog>
</EditForm>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public TodoItemDto? TodoItem { get; set; }

    [Parameter]
    public List<CategoryDto> Categories { get; set; } = new();

    [Parameter]
    public EventCallback<CreateTodoDto> OnSave { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private CreateTodoDto todoDto = new();

    protected override void OnParametersSet()
    {
        if (IsEdit && TodoItem != null)
        {
            todoDto = new CreateTodoDto
            {
                Title = TodoItem.Title,
                Description = TodoItem.Description,
                Category = TodoItem.Category
            };
        }
        else if (!IsEdit)
        {
            todoDto = new CreateTodoDto();
        }
    }

    private async Task Cancel()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task Submit()
    {
        var validationContext = new ValidationContext(todoDto);
        var validationResults = new List<ValidationResult>();

        if (!Validator.TryValidateObject(todoDto, validationContext, validationResults, true))
        {
            foreach (var validationResult in validationResults)
            {
                ToastService.ShowWarning($"Validation Error: {validationResult.ErrorMessage ?? "Please fill in all required fields"}");
            }
            return;
        }

        await OnSave.InvokeAsync(todoDto);
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task Delete()
    {
        if (TodoItem != null)
        {
            await OnDelete.InvokeAsync(TodoItem.Id);
            await IsVisibleChanged.InvokeAsync(false);
        }
    }
}
